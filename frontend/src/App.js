import React, { useState, useEffect } from 'react';\nimport AuthSection from './components/AuthSection';\nimport LearnerSelector from './components/LearnerSelector';\nimport ComponentsTable from './components/ComponentsTable';\nimport { loadLearnersFromS3, fetchLearnerComponents } from './utils/apiService';\n\nfunction App() {\n  const [learners, setLearners] = useState([]);\n  const [selectedLearner, setSelectedLearner] = useState('');\n  const [authCookies, setAuthCookies] = useState('');\n  const [components, setComponents] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  // Load learners from S3 on component mount\n  useEffect(() => {\n    loadLearners();\n  }, []);\n\n  const loadLearners = async () => {\n    try {\n      // You'll need to replace this with your actual S3 bucket URL after deployment\n      const bucketUrl = process.env.REACT_APP_S3_BUCKET_URL || 'https://learner-dashboard-data-123456789012-us-east-1.s3.amazonaws.com';\n      const learnerData = await loadLearnersFromS3(bucketUrl);\n      \n      setLearners(learnerData);\n      setSuccess('Learners loaded successfully!');\n      \n      // Clear success message after 3 seconds\n      setTimeout(() => setSuccess(''), 3000);\n    } catch (err) {\n      setError('Failed to load learners. Please check your S3 configuration.');\n      console.error('Error loading learners:', err);\n    }\n  };\n\n  const handleFetchComponents = async () => {\n    if (!selectedLearner || !authCookies) {\n      setError('Please select a learner and provide authentication cookies.');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    try {\n      const componentsWithStatus = await fetchLearnerComponents(selectedLearner, authCookies);\n      setComponents(componentsWithStatus);\n      setSuccess(`Loaded ${componentsWithStatus.length} components successfully!`);\n      \n      // Clear success message after 3 seconds\n      setTimeout(() => setSuccess(''), 3000);\n    } catch (err) {\n      setError(`Failed to fetch data: ${err.response?.status || err.message}`);\n      console.error('Error fetching components:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const clearError = () => setError('');\n  const clearSuccess = () => setSuccess('');\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>📚 Learner Dashboard</h1>\n        <p>Track learning progress and component status</p>\n      </div>\n\n      {error && (\n        <div className=\"alert alert-error\">\n          {error}\n          <button className=\"alert-close\" onClick={clearError}>×</button>\n        </div>\n      )}\n      \n      {success && (\n        <div className=\"alert alert-success\">\n          {success}\n          <button className=\"alert-close\" onClick={clearSuccess}>×</button>\n        </div>\n      )}\n\n      <AuthSection \n        authCookies={authCookies} \n        onAuthChange={setAuthCookies} \n      />\n\n      <LearnerSelector \n        learners={learners}\n        selectedLearner={selectedLearner}\n        onLearnerChange={setSelectedLearner}\n        loading={loading}\n      />\n\n      <div className=\"fetch-section\">\n        <button \n          onClick={handleFetchComponents} \n          disabled={loading || !selectedLearner || !authCookies}\n          className=\"fetch-button\"\n        >\n          {loading ? '⏳ Loading...' : '🔄 Fetch Components'}\n        </button>\n        \n        {selectedLearner && learners.length > 0 && (\n          <p className=\"selected-learner-info\">\n            Selected: <strong>{learners.find(l => l.id === selectedLearner)?.name}</strong> (ID: {selectedLearner})\n          </p>\n        )}\n      </div>\n\n      <div className=\"components-section\">\n        <h2>📋 Learning Components</h2>\n        <ComponentsTable \n          components={components} \n          loading={loading} \n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;